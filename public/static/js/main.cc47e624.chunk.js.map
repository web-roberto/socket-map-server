{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","hooks/useMapbox.js","pages/MapaPage.js","MapasApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","useState","online","setOnline","useEffect","connected","on","useSocket","Provider","value","mapboxgl","accessToken","puntoInicial","lng","lat","zoom","MapaPage","mapaDiv","useRef","setRef","useCallback","node","current","marcadores","movimientoMarcador","Subject","nuevoMarcador","mapa","coords","setCoords","agregarMarcador","ev","id","lngLat","marker","Marker","v4","setLngLat","addTo","setDraggable","next","target","getLngLat","actualizarPosicion","map","Map","container","style","center","getCenter","toFixed","getZoom","nuevoMarcador$","movimientoMarcador$","useMapbox","useContext","Object","keys","key","subscribe","marcador","emit","className","ref","MapasApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc47e624.chunk.js","sourcesContent":["import React from 'react';\nimport { createContext } from 'react';\nimport { useSocket } from '../hooks/useSocket';\n\nexport const SocketContext = createContext();\n\nexport const SocketProvider = ({ children }) => {\n  const { socket, online } = useSocket('https://socket-map.herokuapp.com/');\n\n  return (\n    <SocketContext.Provider value={{ socket, online }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport io from 'socket.io-client';\n\n\nexport const useSocket = ( serverPath ) => {\n    \n    const socket = useMemo(() => io.connect( serverPath ), [ serverPath ] );\n    const [ online, setOnline ] = useState(false);\n\n    useEffect(() => {\n        setOnline( socket.connected );\n    }, [socket])\n\n    useEffect(() => {\n        socket.on('connect', () => setOnline( true ));\n    }, [ socket ])\n\n    useEffect(() => {\n        socket.on('disconnect', () => setOnline( false ));\n    }, [ socket ])\n\n    return {\n        socket,\n        online\n    }\n}\n","import { useRef, useState, useEffect, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { v4 } from 'uuid';\nimport { Subject } from 'rxjs';\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoia2xlcml0aCIsImEiOiJja2dzOHdteDkwM2tnMndxMWhycnY3Ymh3In0.Zis8hP6HuwcywtgUhfeZoQ';\n\nexport const useMapbox = ( puntoInicial ) => {\n    \n    // Referencia al DIV del mapa\n    const mapaDiv = useRef();\n    const setRef = useCallback( (node) => {\n        mapaDiv.current = node;\n    },[]);\n\n    // Referencia los marcadores\n    const marcadores = useRef({});\n\n    // Observables de Rxjs\n    const movimientoMarcador = useRef( new Subject() );\n    const nuevoMarcador = useRef( new Subject() );\n\n    // Mapa y coords\n    const mapa = useRef();\n    const [ coords, setCoords ] = useState( puntoInicial );\n\n    // función para agregar marcadores\n    const agregarMarcador = useCallback( (ev, id ) => {\n\n        const { lng, lat } = ev.lngLat || ev;\n\n        const marker = new mapboxgl.Marker();\n        marker.id = id ?? v4();\n        \n        marker\n            .setLngLat([ lng, lat ])\n            .addTo( mapa.current )\n            .setDraggable( true );\n\n        // Asignamos al objeto de marcadores\n        marcadores.current[ marker.id ] = marker;\n\n        if ( !id ) {\n            nuevoMarcador.current.next({\n                id: marker.id,\n                lng, \n                lat\n            });\n        }\n\n        // escuchar movimientos del marcador\n        marker.on('drag', ({ target }) => {\n            const { id } = target;\n            const { lng, lat } = target.getLngLat();\n            movimientoMarcador.current.next({ id, lng, lat });\n        });\n\n    },[]);\n\n    // Funcion para actualizar la ubicación del marcador\n    const actualizarPosicion = useCallback( ({ id, lng, lat }) => {\n        marcadores.current[id].setLngLat([ lng, lat ]);\n    },[])\n\n    useEffect( () => {\n        const map = new mapboxgl.Map({\n            container: mapaDiv.current,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [ puntoInicial.lng, puntoInicial.lat ],\n            zoom: puntoInicial.zoom\n        });\n        \n        mapa.current = map;\n    },[ puntoInicial ]);\n\n    // Cuando se mueve el mapa\n    useEffect(() => {\n\n        mapa.current?.on('move', () => {\n            const { lng, lat } = mapa.current.getCenter();\n            setCoords({\n                lng: lng.toFixed(4),\n                lat: lat.toFixed(4),\n                zoom: mapa.current.getZoom().toFixed(2)\n            })\n        });\n\n    },[]);\n\n    // Agregar marcadores cuando hago click\n    useEffect(() => {\n        mapa.current?.on('click', agregarMarcador );\n    }, [agregarMarcador]);\n\n\n    return {\n        agregarMarcador,\n        actualizarPosicion,\n        coords,\n        marcadores,\n        nuevoMarcador$: nuevoMarcador.current,\n        movimientoMarcador$: movimientoMarcador.current,\n        setRef\n    }\n}\n","import React, { useContext, useEffect } from 'react';\n\nimport { SocketContext } from '../context/SocketContext';\nimport { useMapbox } from '../hooks/useMapbox';\n\n\n\nconst puntoInicial = {\n    lng: -122.4725,\n    lat: 37.8010,\n    zoom: 13.5\n}\n\n\nexport const MapaPage = () => {\n\n    const { setRef, coords, nuevoMarcador$, movimientoMarcador$, agregarMarcador, actualizarPosicion } = useMapbox( puntoInicial );\n    const { socket } = useContext( SocketContext );\n\n    // Escuchar los marcadores existentes\n    useEffect(() => {\n        socket.on( 'marcadores-activos', (marcadores) => {\n            for( const key of Object.keys( marcadores ) ) {\n                agregarMarcador( marcadores[key], key );\n            }\n        });\n    }, [ socket, agregarMarcador ])\n\n    // Nuevo marcador\n    useEffect(() => {\n        nuevoMarcador$.subscribe( marcador => {\n            socket.emit( 'marcador-nuevo', marcador );\n        });\n    }, [nuevoMarcador$, socket]);\n\n    // Movimiento de Marcador\n    useEffect(() => {\n        movimientoMarcador$.subscribe( marcador => {\n            socket.emit( 'marcador-actualizado', marcador );\n        });\n    }, [socket, movimientoMarcador$]);\n\n    // Mover marcador mediante sockets\n    useEffect( () => {\n        socket.on( 'marcador-actualizado', ( marcador) => {\n            actualizarPosicion( marcador );\n        })\n    },[ socket, actualizarPosicion ])\n    \n    // Escuchar nuevos marcadores\n    useEffect(() => {\n        \n        socket.on('marcador-nuevo', ( marcador ) => {\n            agregarMarcador( marcador, marcador.id );\n        });\n\n    }, [socket, agregarMarcador])\n\n\n    return (\n        <>\n\n            <div className=\"info\">\n                Lng: { coords.lng } | lat: { coords.lat } | zoom: { coords.zoom }\n            </div>\n            \n            <div \n                ref={ setRef }\n                className=\"mapContainer\"\n            />\n\n            \n\n        </>\n    )\n}\n","import React from 'react'\n\nimport { SocketProvider } from './context/SocketContext'\nimport { MapaPage } from './pages/MapaPage'\n\nexport const MapasApp = () => {\n    return (\n        <SocketProvider>\n            <MapaPage />\n        </SocketProvider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { MapasApp } from './MapasApp';\n\n\nReactDOM.render(\n    <MapasApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}